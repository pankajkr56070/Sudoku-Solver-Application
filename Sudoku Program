#include <iostream>
#include<bits/stdc++.h>
using namespace std;


#define UNASSIGNED 0
#define N 9
bool FindUnassignedLocation(int grid[N][N],int &row,int &col){
for(row=0;row<N;row++){
    for(col=0;col<N;col++)
        if(grid[row][col]==UNASSIGNED)
        return true;
}
return false;
}

bool usedinCol(int grid[N][N],int row,int num)
{
    for(int i=0;i<N;i++){
        if(grid[row][i]==num)
            return true;
    }
    return false;
}

bool usedinRow(int grid[N][N],int col,int num)
{
    for(int i=0;i<N;i++){
        if(grid[i][col]==num)
            return true;
    }
    return false;
}

bool usedinBox(int grid[N][N],int startRow,int startCol,int num)
{
    for(int i=0;i<3;i++){
      for(int j=0;j<3;j++){
         if(grid[i+startRow][j+startCol]==num)
            return true;
      }
    }
    return false;
}

bool isSafe(int grid[N][N],int row,int col,int num){
if(!usedinRow(grid,col,num) && !usedinCol(grid,row,num)&& !usedinBox(grid,row-row%3,col-col%3,num))
    return true;
return false;
}

bool solveSudoku(int grid[N][N]){
int row,col;
if(FindUnassignedLocation(grid,row,col)==false)
    return true;
for(int i=1;i<=9;i++){
    if(isSafe(grid,row,col,i)){
        grid[row][col]=i;
        if(solveSudoku(grid))
            return true;
    grid[row][col]=UNASSIGNED;
    }
}
return false;
}

int main()
{int T;
cin>>T;
while(T--){
   int grid[N][N];
   for(int i=0;i<N;i++){
    for(int j=0;j<N;j++)
        cin>>grid[i][j];
   }
solveSudoku(grid);
for(int i=0;i<N;i++){
 for(int j=0;j<N;j++){
    cout<<grid[i][j]<<" ";
   }
}
cout<<"\n";
   }

    return 0;
}
